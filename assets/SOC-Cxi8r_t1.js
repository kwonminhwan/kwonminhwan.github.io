import{_ as t,c as l,a as i,o}from"./index-CS_yqCeb.js";const e="/assets/soc-C1cFoawO.png",a={},r={class:"container my-5"};function d(c,s){return o(),l("div",r,s[0]||(s[0]=[i('<div class="card shadow-lg border-0 p-4 mb-5 bg-dark text-white rounded-4"><div class="row g-4 align-items-center"><div class="col-md-12"><div class="border-start border-3 ps-3 mb-3 border-light"><h1 class="fw-bold mb-1 fs-3">🎮 Bulls and Cows - 숫자 야구 게임</h1><p class="lead text-muted mb-0">FPGA (DE1-SoC) + HPS 환경에서 구현된 숫자 야구 게임 시스템</p></div><p class="mt-4"><strong>프로젝트 개요:</strong><br> DE1-SoC FPGA 보드와 Ubuntu 환경에서 실행되는 C 코드를 연동하여, 숫자 야구 게임(Bulls and Cows)을 구현한 프로젝트입니다. 사용자는 UART를 통해 숫자를 입력하고, 결과는 LED 및 7-Segment를 통해 직관적으로 출력됩니다. </p><ul class="list-unstyled mb-0 mt-3"><li class="mb-2"><strong>팀원:</strong> 2019265006 권민환, 2019265093 이상학</li><li class="mb-2"><strong>보드:</strong> DE1-SoC FPGA (Intel)</li><li class="mb-2"><strong>개발 도구:</strong> Quartus Prime, Ubuntu, C</li><li class="mb-2"><strong>연동:</strong> Memory-Mapped I/O, mmap, UART 통신</li></ul><div class="text-center mt-4"><a href="https://github.com/kwonminhwan/RobotSOC" target="_blank" class="btn btn-outline-light btn-lg px-4"><i class="bi bi-github me-2"></i> GitHub 저장소 보기 </a></div></div></div></div><div class="card bg-dark text-white shadow-lg rounded-4 p-4 mb-5"><h2 class="fw-bold mb-4 text-center">✨ 주요 기능 및 규칙</h2><div class="row row-cols-1 row-cols-md-2 g-4"><div class="col"><div class="card bg-secondary text-white h-100 p-4 rounded-3 shadow-sm"><h5 class="fw-bold mb-3">📋 게임 규칙</h5><ul><li>시스템이 3자리 무작위 숫자를 생성</li><li>사용자는 UART를 통해 숫자 입력</li><li>숫자와 위치가 일치 → 스트라이크</li><li>숫자만 일치, 위치 다름 → 볼</li><li>전부 불일치 → 아웃</li><li>총 9번 기회 내 정답 입력 시 승리</li></ul></div></div><div class="col"><div class="card bg-secondary text-white h-100 p-4 rounded-3 shadow-sm"><h5 class="fw-bold mb-3">⚙ 시스템 구성</h5><ul><li><strong>Ubuntu:</strong> 사용자 입력 처리, 정답 생성</li><li><strong>C 코드:</strong> 숫자 비교 및 하드웨어 제어</li><li><strong>FPGA LED:</strong> 남은 기회 시각화</li><li><strong>7-Segment:</strong> Strike/Ball/Out 및 메시지 출력</li><li><strong>Quartus:</strong> 핀 설정 및 인터페이스 구성</li></ul></div></div></div></div><div class="card bg-dark text-white shadow-lg rounded-4 p-4 mb-5"><h2 class="fw-bold mb-4 text-center">📸 실행 결과 및 시연</h2><ul><li>start 입력 시 LED 및 세그먼트 초기화</li><li>게임 종료 후 CLEAR 또는 LOSE 메시지 출력</li><li>중간 시도 시 SxBxOx 형태로 7-Segment 출력</li><li>UART 통신 (Putty)로 로그 확인 가능</li></ul><div class="text-center mt-4"><img src="'+e+'" alt="start/패배/승리 사진" class="img-fluid rounded shadow" style="max-width:600px;"></div><p class="text-center mt-4"> ▶ <a href="https://www.youtube.com/shorts/_VQUdaWHp44" target="_blank" class="text-success fw-bold">승리 시연 영상 보기 (YouTube)</a><br> ▶ <a href="https://www.youtube.com/shorts/t23v6-k7sek" target="_blank" class="text-danger fw-bold">패배 시연 영상 보기 (YouTube)</a></p></div>',3)]))}const b=t(a,[["render",d]]);export{b as default};
